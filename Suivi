<!doctype html>
<html lang="fr">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Brad Bitt — Suivi de projet</title>
  <style>
    :root{
      --bg:#0f1724; --card:#0b1220; --muted:#94a3b8; --accent:#7c3aed; --accent-2:#06b6d4; --ok:#16a34a; --warn:#f59e0b; --danger:#ef4444;
      --glass: rgba(255,255,255,0.03);
      --radius:14px; --pad:18px;
      color-scheme: dark;
    }
    *{box-sizing:border-box}
    body{font-family:Inter,ui-sans-serif,system-ui,-apple-system,'Segoe UI',Roboto,'Helvetica Neue',Arial; margin:0; min-height:100vh; background:linear-gradient(180deg,#071028 0%, #081123 60%); color:#e6eef8}
    .wrap{max-width:980px;margin:28px auto;padding:22px;background:linear-gradient(180deg, rgba(255,255,255,0.02), transparent);border-radius:18px;box-shadow:0 8px 30px rgba(2,6,23,0.6)}
    header{display:flex;gap:16px;align-items:center}
    .logo{width:64px;height:64px;border-radius:12px;background:linear-gradient(135deg,var(--accent),var(--accent-2));display:flex;align-items:center;justify-content:center;font-weight:700}
    h1{margin:0;font-size:20px}
    p.lead{margin:6px 0 0;color:var(--muted);font-size:13px}

    .top-controls{display:flex;gap:8px;margin-left:auto}
    button.btn{background:var(--glass);border:1px solid rgba(255,255,255,0.04);color:inherit;padding:8px 12px;border-radius:10px;cursor:pointer}
    button.primary{background:linear-gradient(90deg,var(--accent),var(--accent-2));border:none;color:white}

    .progress-wrap{margin-top:18px}
    .progress-bar{height:14px;background:rgba(255,255,255,0.04);border-radius:999px;overflow:hidden}
    .progress-inner{height:100%;width:0%;background:linear-gradient(90deg,var(--accent),var(--accent-2));transition:width 400ms ease}
    .progress-meta{display:flex;justify-content:space-between;margin-top:8px;color:var(--muted);font-size:13px}

    .grid{display:grid;grid-template-columns:1fr 320px;gap:18px;margin-top:18px}
    .card{background:var(--card);padding:var(--pad);border-radius:14px}
    .steps{display:flex;flex-direction:column;gap:12px}

    .step{display:flex;align-items:center;gap:12px;padding:12px;border-radius:12px;background:linear-gradient(180deg, rgba(255,255,255,0.01), transparent)}
    .step .thumb{width:44px;height:44px;border-radius:10px;background:rgba(255,255,255,0.03);display:flex;align-items:center;justify-content:center;font-weight:700}
    .step .meta{flex:1}
    .step h3{margin:0;font-size:15px}
    .step p{margin:6px 0 0;font-size:13px;color:var(--muted)}
    .status{min-width:108px;text-align:right;font-weight:600;font-size:13px}

    .controls-row{display:flex;gap:8px;margin-top:12px}
    input[type=text]{width:100%;padding:10px;border-radius:10px;border:1px solid rgba(255,255,255,0.03);background:transparent;color:inherit}
    .small{font-size:12px;color:var(--muted)}

    .right-col{display:flex;flex-direction:column;gap:12px}
    textarea{width:100%;min-height:160px;border-radius:10px;padding:12px;background:transparent;border:1px solid rgba(255,255,255,0.03);color:inherit}
    .kpi{display:flex;gap:10px;align-items:center}
    .kpi .num{font-size:20px;font-weight:700}

    .row{display:flex;gap:8px;align-items:center}
    .tag{padding:6px 8px;border-radius:999px;background:rgba(255,255,255,0.02);font-size:13px}

    footer{margin-top:14px;color:var(--muted);font-size:13px;text-align:center}

    /* statuses */
    .st-todo{color:var(--muted)}
    .st-doing{color:var(--warn)}
    .st-done{color:var(--ok)}

    @media (max-width:880px){.grid{grid-template-columns:1fr;}.top-controls{display:none}}
  </style>
</head>
<body>
  <div class="wrap">
    <header>
      <div class="logo">BB</div>
      <div>
        <h1>Brad Bitt — Suivi de projet</h1>
        <p class="lead">Tableau de bord interactif pour suivre l'avancement (clique sur une étape pour changer son statut)</p>
      </div>
      <div class="top-controls">
        <button class="btn" id="importBtn">Importer</button>
        <button class="btn" id="exportBtn">Exporter</button>
        <button class="btn primary" id="addBtn">+ Ajouter une étape</button>
      </div>
    </header>

    <section class="progress-wrap">
      <div class="progress-bar" aria-hidden>
        <div id="progressInner" class="progress-inner" style="width:0%"></div>
      </div>
      <div class="progress-meta">
        <div id="progressText">0% complété</div>
        <div class="small" id="countsText">0 / 0 étapes</div>
      </div>
    </section>

    <div class="grid">
      <div class="card">
        <div class="steps" id="stepsList"></div>

        <div class="controls-row">
          <input id="newTitle" type="text" placeholder="Nouvelle étape (ex: Scénario)" />
          <button class="btn primary" id="createStep">Ajouter</button>
        </div>
      </div>

      <aside class="right-col">
        <div class="card">
          <div style="display:flex;justify-content:space-between;align-items:center">
            <div>
              <div class="small">Vue d'ensemble</div>
              <div class="kpi"><div class="num" id="doneNum">0</div><div class="small">étapes terminées</div></div>
            </div>
            <div style="text-align:right">
              <div class="small">Progression</div>
              <div id="percentBig" style="font-weight:700;font-size:18px">0%</div>
            </div>
          </div>

          <hr style="margin:12px 0;border:none;border-top:1px solid rgba(255,255,255,0.03)">
          <div class="small">Statuts:</div>
          <div class="row" style="margin-top:8px">
            <div class="tag">À définir / À faire (clique pour cycler)</div>
            <div class="tag">En cours</div>
            <div class="tag">Terminé</div>
          </div>
        </div>

        <div class="card">
          <div class="small">Notes rapides</div>
          <textarea id="notes" placeholder="Idées, liens, ressources..."></textarea>
          <div style="display:flex;gap:8px;margin-top:8px">
            <button class="btn" id="saveNotes">Sauvegarder</button>
            <button class="btn" id="clearAll">Réinitialiser tout</button>
          </div>
        </div>

        <div class="card">
          <div class="small">Export / Import</div>
          <div style="display:flex;gap:8px;margin-top:8px">
            <button class="btn" id="exportJson">Télécharger JSON</button>
            <input id="importFile" type="file" accept="application/json" style="display:none">
            <button class="btn" id="importFileBtn">Charger JSON</button>
          </div>
        </div>

      </aside>
    </div>

    <footer>Fichier local (sauvegarde automatique dans le navigateur). Imprimer/Partager selon besoin.</footer>
  </div>

  <script>
    // Minimal tracker: steps with statuses: todo, doing, done. Persist in localStorage.
    const DEFAULT_STEPS = [
      {id:1,title:'Concept global',desc:'Pitch, format (mini-série / jeu), ton',status:'todo'},
      {id:2,title:'Univers & ambiance',desc:'Style visuel, inspirations, références',status:'todo'},
      {id:3,title:'Personnages principaux',desc:'Fiches personnages et relations',status:'todo'},
      {id:4,title:'Plan narratif',desc:'Épisodes / niveaux',status:'todo'},
      {id:5,title:'Style graphique',desc:'Pixel art / rétro / palette',status:'todo'},
      {id:6,title:'Dialogues / scripts',desc:'Scènes et dialogues',status:'todo'},
      {id:7,title:'Éléments techniques',desc:'Mécaniques de jeu, assets',status:'todo'},
      {id:8,title:'Finitions',desc:'Tests, corrections, musique',status:'todo'}
    ];

    const STORAGE_KEY = 'bradbitt_tracker_v1';
    let state = loadState();

    function loadState(){
      try{
        const raw = localStorage.getItem(STORAGE_KEY);
        if(raw) return JSON.parse(raw);
      }catch(e){console.warn(e)}
      return {steps: DEFAULT_STEPS, notes:'', nextId: 100};
    }
    function saveState(){
      localStorage.setItem(STORAGE_KEY, JSON.stringify(state));
      render();
    }

    const stepsList = document.getElementById('stepsList');
    const progressInner = document.getElementById('progressInner');
    const progressText = document.getElementById('progressText');
    const countsText = document.getElementById('countsText');
    const percentBig = document.getElementById('percentBig');
    const doneNum = document.getElementById('doneNum');

    function render(){
      stepsList.innerHTML = '';
      const steps = state.steps;
      steps.forEach(s=>{
        const el = document.createElement('div'); el.className='step';
        el.dataset.id = s.id;
        el.innerHTML = `
          <div class="thumb">${String(s.title||'')[0]||'•'}</div>
          <div class="meta">
            <h3 contenteditable="true" data-field="title" data-id="${s.id}">${escapeHtml(s.title)}</h3>
            <p contenteditable="true" data-field="desc" data-id="${s.id}">${escapeHtml(s.desc||'')}</p>
          </div>
          <div class="status ${clsFor(s.status)}" data-id="${s.id}">${labelFor(s.status)}</div>
        `;
        // toggle on click: todo -> doing -> done -> todo
        el.addEventListener('click',(ev)=>{
          // prevent clicks from editing text
          if(ev.target && (ev.target.dataset && ev.target.dataset.field)) return;
          cycleStatus(s.id);
        });
        // editable fields
        el.querySelectorAll('[contenteditable=true]').forEach(node=>{
          node.addEventListener('blur',()=>{
            const fld = node.dataset.field; const id = Number(node.dataset.id);
            const st = state.steps.find(x=>x.id===id);
            if(st){st[fld]=node.innerText.trim(); saveState();}
          });
        });

        stepsList.appendChild(el);
      });

      // progress
      const total = steps.length;
      const done = steps.filter(s=>s.status==='done').length;
      const perc = total? Math.round((done/total)*100):0;
      progressInner.style.width = perc+'%';
      progressText.innerText = perc + '% complété';
      countsText.innerText = done + ' / ' + total + ' étapes';
      percentBig.innerText = perc + '%';
      doneNum.innerText = done;
    }

    function clsFor(status){
      return status==='todo'?'st-todo':(status==='doing'?'st-doing':'st-done');
    }
    function labelFor(status){
      return status==='todo'?'À faire':(status==='doing'?'En cours':'Terminé');
    }
    function cycleStatus(id){
      const s = state.steps.find(x=>x.id===id);
      if(!s) return;
      s.status = s.status==='todo'?'doing':(s.status==='doing'?'done':'todo');
      saveState();
    }

    function escapeHtml(str){ return String(str||'').replaceAll('&','&amp;').replaceAll('<','&lt;').replaceAll('>','&gt;'); }

    // controls
    document.getElementById('createStep').addEventListener('click',()=>{
      const val = document.getElementById('newTitle').value.trim();
      if(!val) return; addStep(val,'Nouvelle étape'); document.getElementById('newTitle').value='';
    });
    document.getElementById('addBtn').addEventListener('click',()=>{ document.getElementById('newTitle').focus(); });

    function addStep(title,desc){
      const id = state.nextId++; state.steps.push({id:id,title:title,desc:desc||'',status:'todo'}); saveState();
    }

    // notes
    const notesEl = document.getElementById('notes'); notesEl.value = state.notes||'';
    document.getElementById('saveNotes').addEventListener('click',()=>{ state.notes = notesEl.value; saveState(); alert('Notes sauvegardées dans le navigateur.'); });

    document.getElementById('clearAll').addEventListener('click',()=>{
      if(!confirm('Supprimer toutes les étapes et revenir par défaut ?')) return; localStorage.removeItem(STORAGE_KEY); state = loadState(); render(); notesEl.value = state.notes||'';
    });

    // Export / Import
    function exportJson(){
      const dataStr = JSON.stringify(state, null, 2);
      const blob = new Blob([dataStr],{type:'application/json'});
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a'); a.href = url; a.download = 'bradbitt_tracker.json'; document.body.appendChild(a); a.click(); a.remove(); URL.revokeObjectURL(url);
    }
    document.getElementById('exportBtn').addEventListener('click', exportJson);
    document.getElementById('exportJson').addEventListener('click', exportJson);

    // file import
    document.getElementById('importFileBtn').addEventListener('click',()=>document.getElementById('importFile').click());
    document.getElementById('importFile').addEventListener('change',(ev)=>{
      const f = ev.target.files[0]; if(!f) return; const reader = new FileReader();
      reader.onload = e=>{ try{ const d = JSON.parse(e.target.result); if(d && d.steps){ state = d; saveState(); notesEl.value = state.notes||''; alert('Import OK'); } else alert('Fichier non valide'); }catch(err){ alert('Erreur lors de la lecture du fichier'); }}; reader.readAsText(f);
    });

    document.getElementById('importBtn').addEventListener('click',()=>document.getElementById('importFile').click());

    // simple loading
    render();

    // keyboard: Ctrl+S save notes
    window.addEventListener('keydown',(e)=>{ if((e.ctrlKey||e.metaKey) && e.key.toLowerCase()==='s'){ e.preventDefault(); state.notes = notesEl.value; saveState(); alert('Notes sauvegardées.'); } });
  </script>
</body>
</html>
